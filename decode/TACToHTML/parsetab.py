
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CLOSE_ROUND EQ FLOAT16 FLOAT32 GOTO GT GTEQ IF IFC INPUT INPUTS INT LT LTEQ NE OPEN_ROUND PRINT PRINTEX STRING\n        progr : statement_list\n        \n        statement_list : statement_list statement\n        \n        statement_list : statement\n        \n        statement : input_statement\n                | inputs_statement\n                | print_statement\n                | printex_statement\n                | if_statement\n                | ifc_statement\n                | goto_statement\n        \n        lineno : OPEN_ROUND INT CLOSE_ROUND\n        \n        input_statement : lineno INPUT STRING\n        \n        inputs_statement : lineno INPUTS STRING\n        \n        input_statement : lineno INPUT INT\n        \n        inputs_statement : lineno INPUTS INT\n        \n        print_statement : lineno PRINT STRING\n        \n        print_statement : lineno PRINT INT\n        \n        printex_statement : lineno PRINTEX STRING\n        \n        printex_statement : lineno PRINTEX INT\n        \n        if_statement : lineno IF STRING lineno\n        \n        ifc_statement : lineno IFC comp_expr lineno\n        \n        comp_expr : LT INT\n        \n        comp_expr : LTEQ INT\n        \n        comp_expr : GT INT\n        \n        comp_expr : GTEQ INT\n        \n        comp_expr : EQ INT\n        \n        comp_expr : NE INT\n        \n        comp_expr : LT FLOAT16\n            | LT FLOAT32\n        \n        comp_expr : LTEQ FLOAT16\n            | LTEQ FLOAT32\n        \n        comp_expr : GT FLOAT16\n            | GT FLOAT32\n        \n        comp_expr : GTEQ FLOAT16\n            | GTEQ FLOAT32\n        \n        comp_expr : EQ FLOAT16\n            | EQ FLOAT32\n        \n        comp_expr : NE FLOAT16\n            | NE FLOAT32\n        \n        goto_statement : lineno GOTO lineno \n        '
    
_lr_action_items = {'OPEN_ROUND':([0,2,3,4,5,6,7,8,9,10,13,20,22,23,24,25,26,27,28,29,30,31,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,],[12,12,-3,-4,-5,-6,-7,-8,-9,-10,-2,12,-12,-14,-13,-15,-16,-17,-18,-19,12,12,-40,-11,-20,-21,-22,-28,-29,-23,-30,-31,-24,-32,-33,-25,-34,-35,-26,-36,-37,-27,-38,-39,]),'$end':([1,2,3,4,5,6,7,8,9,10,13,22,23,24,25,26,27,28,29,38,39,40,41,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-2,-12,-14,-13,-15,-16,-17,-18,-19,-40,-11,-20,-21,]),'INPUT':([11,39,],[14,-11,]),'INPUTS':([11,39,],[15,-11,]),'PRINT':([11,39,],[16,-11,]),'PRINTEX':([11,39,],[17,-11,]),'IF':([11,39,],[18,-11,]),'IFC':([11,39,],[19,-11,]),'GOTO':([11,39,],[20,-11,]),'INT':([12,14,15,16,17,32,33,34,35,36,37,],[21,23,25,27,29,42,45,48,51,54,57,]),'STRING':([14,15,16,17,18,],[22,24,26,28,30,]),'LT':([19,],[32,]),'LTEQ':([19,],[33,]),'GT':([19,],[34,]),'GTEQ':([19,],[35,]),'EQ':([19,],[36,]),'NE':([19,],[37,]),'CLOSE_ROUND':([21,],[39,]),'FLOAT16':([32,33,34,35,36,37,],[43,46,49,52,55,58,]),'FLOAT32':([32,33,34,35,36,37,],[44,47,50,53,56,59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'progr':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,2,],[3,13,]),'input_statement':([0,2,],[4,4,]),'inputs_statement':([0,2,],[5,5,]),'print_statement':([0,2,],[6,6,]),'printex_statement':([0,2,],[7,7,]),'if_statement':([0,2,],[8,8,]),'ifc_statement':([0,2,],[9,9,]),'goto_statement':([0,2,],[10,10,]),'lineno':([0,2,20,30,31,],[11,11,38,40,41,]),'comp_expr':([19,],[31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> progr","S'",1,None,None,None),
  ('progr -> statement_list','progr',1,'p_progr','parser.py',15),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',21),
  ('statement_list -> statement','statement_list',1,'p_statement_list_statement','parser.py',27),
  ('statement -> input_statement','statement',1,'p_statement','parser.py',33),
  ('statement -> inputs_statement','statement',1,'p_statement','parser.py',34),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',35),
  ('statement -> printex_statement','statement',1,'p_statement','parser.py',36),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',37),
  ('statement -> ifc_statement','statement',1,'p_statement','parser.py',38),
  ('statement -> goto_statement','statement',1,'p_statement','parser.py',39),
  ('lineno -> OPEN_ROUND INT CLOSE_ROUND','lineno',3,'p_lineno','parser.py',45),
  ('input_statement -> lineno INPUT STRING','input_statement',3,'p_input_statement_string','parser.py',51),
  ('inputs_statement -> lineno INPUTS STRING','inputs_statement',3,'p_inputs_statement_string','parser.py',57),
  ('input_statement -> lineno INPUT INT','input_statement',3,'p_input_statement_reference','parser.py',63),
  ('inputs_statement -> lineno INPUTS INT','inputs_statement',3,'p_inputs_statement_reference','parser.py',69),
  ('print_statement -> lineno PRINT STRING','print_statement',3,'p_print_statement_string','parser.py',75),
  ('print_statement -> lineno PRINT INT','print_statement',3,'p_print_statement_reference','parser.py',81),
  ('printex_statement -> lineno PRINTEX STRING','printex_statement',3,'p_printex_statement_string','parser.py',87),
  ('printex_statement -> lineno PRINTEX INT','printex_statement',3,'p_printex_statement_reference','parser.py',93),
  ('if_statement -> lineno IF STRING lineno','if_statement',4,'p_if_statement','parser.py',99),
  ('ifc_statement -> lineno IFC comp_expr lineno','ifc_statement',4,'p_ifc_statement','parser.py',105),
  ('comp_expr -> LT INT','comp_expr',2,'p_comp_expr_lt','parser.py',111),
  ('comp_expr -> LTEQ INT','comp_expr',2,'p_comp_expr_lteq','parser.py',117),
  ('comp_expr -> GT INT','comp_expr',2,'p_comp_expr_gt','parser.py',123),
  ('comp_expr -> GTEQ INT','comp_expr',2,'p_comp_expr_gteq','parser.py',129),
  ('comp_expr -> EQ INT','comp_expr',2,'p_comp_expr_eq','parser.py',135),
  ('comp_expr -> NE INT','comp_expr',2,'p_comp_expr_ne','parser.py',141),
  ('comp_expr -> LT FLOAT16','comp_expr',2,'p_comp_expr_lt_float','parser.py',147),
  ('comp_expr -> LT FLOAT32','comp_expr',2,'p_comp_expr_lt_float','parser.py',148),
  ('comp_expr -> LTEQ FLOAT16','comp_expr',2,'p_comp_expr_lteq_float','parser.py',154),
  ('comp_expr -> LTEQ FLOAT32','comp_expr',2,'p_comp_expr_lteq_float','parser.py',155),
  ('comp_expr -> GT FLOAT16','comp_expr',2,'p_comp_expr_gt_float','parser.py',161),
  ('comp_expr -> GT FLOAT32','comp_expr',2,'p_comp_expr_gt_float','parser.py',162),
  ('comp_expr -> GTEQ FLOAT16','comp_expr',2,'p_comp_expr_gteq_float','parser.py',168),
  ('comp_expr -> GTEQ FLOAT32','comp_expr',2,'p_comp_expr_gteq_float','parser.py',169),
  ('comp_expr -> EQ FLOAT16','comp_expr',2,'p_comp_expr_eq_float','parser.py',175),
  ('comp_expr -> EQ FLOAT32','comp_expr',2,'p_comp_expr_eq_float','parser.py',176),
  ('comp_expr -> NE FLOAT16','comp_expr',2,'p_comp_expr_ne_float','parser.py',182),
  ('comp_expr -> NE FLOAT32','comp_expr',2,'p_comp_expr_ne_float','parser.py',183),
  ('goto_statement -> lineno GOTO lineno','goto_statement',3,'p_goto_statement','parser.py',189),
]
